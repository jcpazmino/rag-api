/* 
‚úÖ Recibir una pregunta del usuario
üîç Generar su embedding
üì° Consultar en ChromaDB por similitud
üìÑ Devolver los fragmentos m√°s relevantes con su metadato
 */

import express from 'express';
import OpenAI from 'openai';
import { queryCollection, getCollectionIdByName, listDocumentsInCollection, deleteCollection, createCollection } from '../services/rag/chromaService.js';

const router = express.Router();
router.use(express.json());

const COLLECTION_NAME = 'documentos_rag';
const experticia = 'Pedagogo, especialista en educaci√≥n y formaci√≥n';
const publicoRespuesta = 'Profesores, Directores y asistentes de direcci√≥n';
const promptSystem = `
Eres un asistente con experiencia especializada en ${experticia}. 
Tu tarea es generar respuestas claras, √∫tiles y bien fundamentadas, usando √∫nicamente la informaci√≥n proporcionada por los documentos que te ser√°n entregados.

Tu respuesta debe estar orientada al siguiente p√∫blico: ${publicoRespuesta}.
Adapta el lenguaje, el nivel de detalle y el tono para que sea apropiado para ese p√∫blico.

No inventes informaci√≥n fuera de los documentos. Si la respuesta no est√° en los documentos, acl√°ralo con transparencia.
Enf√≥cate en ser preciso, relevante y √∫til para quien har√° uso de tu explicaci√≥n.
`;


router.post('/', async (req, res) => {
  const { pregunta, n } = req.body;
  if (!pregunta) return res.status(400).json({ error: 'Falta la pregunta' });

  try {
    // 1. Obtener el ID de la colecci√≥n
    const collectionId = await getCollectionIdByName(COLLECTION_NAME);
    if (!collectionId) return res.status(404).json({ error: 'Colecci√≥n no encontrada' });

    // 2. Generar el embedding de la pregunta
    const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
    const queryEmbedding = await getQueryEmbedding(pregunta, openai);

    // 3. Realizar la consulta en ChromaDB
    const resultados = await queryCollection(collectionId, queryEmbedding, n || 3);

    // 4. Formatear la respuesta
    const respuestaFormateada = {
      pregunta: pregunta,
      resultados: resultados.documents[0].map((texto, index) => ({
        texto: texto,
        score: 1 - resultados.distances[0][index], // Convertir distancia a score (1 - distancia)
        metadata: resultados.metadatas[0][index]
      }))
    };

    //5. pasar la respuesta a el agente de openai, para que nos formatee la respuesta
    const respuestaAgente = await openai.chat.completions.create({
      model: "gpt-3.5-turbo",
      messages: [
        { role: "system", content: promptSystem },
        { role: "user", content: JSON.stringify(respuestaFormateada) }
      ]
    });
    console.log(respuestaAgente.choices[0].message.content);
    res.json(respuestaAgente.choices[0].message.content);
  } catch (err) {
    console.error('‚ùå Error en /query:', err);
    res.status(500).json({ error: 'Error al realizar la b√∫squeda sem√°ntica.' });
  }
});

// Nuevo endpoint para listar documentos de la colecci√≥n
router.get('/documentos', async (req, res) => {
  try {
    const collectionId = await getCollectionIdByName(COLLECTION_NAME);
    if (!collectionId) return res.status(404).json({ error: 'Colecci√≥n no encontrada' });

    const documentos = await listDocumentsInCollection(collectionId);
    res.json(documentos);
  } catch (err) {
    console.error('‚ùå Error al listar documentos:', err);
    res.status(500).json({ error: 'Error al listar documentos.' });
  }
}); 

router.post('/reiniciar-coleccion', async (req, res) => {
  try {
    let collectionId = await getCollectionIdByName(COLLECTION_NAME);
    if (collectionId) {
      try {
        await deleteCollection(collectionId);
      } catch (err) {
        // Si es 404, ignora el error
        if (err.response && err.response.status !== 404) throw err;
      }
      // Espera un momento para asegurar que la colecci√≥n se borre
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    // Verifica de nuevo si la colecci√≥n existe antes de crearla
    collectionId = await getCollectionIdByName(COLLECTION_NAME);
    if (!collectionId) {
      await createCollection(COLLECTION_NAME);
    }
    res.json({ message: 'Colecci√≥n reiniciada correctamente.' });
  } catch (err) {
    console.error('‚ùå Error al reiniciar la colecci√≥n:', err);
    res.status(500).json({ error: 'Error al reiniciar la colecci√≥n.' });
  }
});

async function getQueryEmbedding(text, openai) {
  const response = await openai.embeddings.create({
    model: 'text-embedding-3-small',
    input: text,
  });
  return response.data[0].embedding;
}
export default router;
